; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html



; [env:maple]
; [env:genericSTM32F103C8]
[env:generic_stm32f103c]

platform = ststm32
framework = arduino

board_build.core = maple
; board_build.core = ststm32

board = genericSTM32F103C8
; board = maple
; board = maple_mini_origin
; board = generic_stm32f103c
; board = 
; board = STM32F103C8
; board = genericSTM32F103C
; board = blackpill_f103c8
; board = bluepill_f103c8

board_build.mcu = stm32f103c8t6
; board_build.mcu = stm32f103cbt6

; must change MCU frequency to 72MHz, for the LCD, and the serial port
board_build.f_cpu = 72000000L
; board_build.f_cpu = 64000000L
; board_build.f_cpu = 56000000L

lib_deps = 
	; https://github.com/altLab/HT1621
	https://github.com/dreamcat4/HT1621
	siruli/MAX6675@^2.1.0
	br3ttb/PID@^1.2.1


; build_flags =
; ; build flags for maple
			; -D ENABLE_USB_SERIAL
; -D ENABLE_USB_MASS_STORAGE

;     -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
;     -D USBCON
;     -D USB_VID=0x0483
;     -D USB_MANUFACTURER="WeAct Studio"
;     -D USB_PRODUCT="BLACKPILL_411CE"
;     -D HAL_PCD_MODULE_ENABLED

; serial monitor configuration
monitor_port = /dev/ttyACM0
monitor_speed = 115200
; monitor_rts = 1
; monitor_dtr = 1

monitor_filters = default, colorize, printable
; monitor_filters = default, colorize, log2file, printable, time, send_on_enter, esp32_exception_decoder, esp8266_exception_decoder
; monitor_filters =
	; default - Remove typical terminal control codes from input
	; colorize - Apply different colors for received and echo
	; debug - Print what is sent and received
	; direct - Do-nothing: forward all data unchanged
	; hexlify - Show a hexadecimal representation of the data (code point of each character)
	; log2file - Log data to a file “platformio-device-monitor-%date%.log” located in the current working directory
	; nocontrol - Remove all control codes, incl. CR+LF
	; printable - Show decimal code for all non-ASCII characters and replace most control codes
	; time - Add timestamp with milliseconds for each new line
	; send_on_enter - Send a text to device on ENTER
	; esp32_exception_decoder - Custom filter for Espressif 32 which decodes crash exception
	; esp8266_exception_decoder - Custom filter for Espressif 8266 which decodes crash exception

; monitor_flags=
;     --parity
;     N
;     --encoding
;     UTF-8




; to configure DFU mode flashing:
; ===================================================================================================
; linux: dfu mode requires the following udev rule added
; /etc/udev/rules.d/99-weact-f411ce.rules:
; SUBSYSTEMS=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", GROUP="plugdev", MODE="660"

; otherwise you will see 
; [251456.436672] usb 1-2: device not accepting address 95, error -71
; Device not responding to setup address.

; to enter dfu mode:
; ============================================
; hold boot0 button during boot or reset


; upload_protocol = stlink
; upload_protocol = jlink
; upload_protocol = tumpa
; upload_protocol = serial

; debug_tool = stlink
; debug_tool = jlink
; debug_tool = tumpa

; debug_port = <CONFIGURE GDB PORT>
; upload_port = <THE SAME AS DEBUG PORT>


; upload_speed = 
; upload_flags = 
; upload_resetmethod = 


; upload_protocol = custom
; upload_command = 

; platformio-ide.reopenSerialMonitorDelay
; reopenSerialMonitorDelay = 5;



; upload_protocol = custom
; upload_flags =
;     -C
;     $PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
;     -p
;     atmega328p
;     -P
;     $UPLOAD_PORT
;     -b
;     115200
;     -c
;     stk500v1
; upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i


upload_protocol = custom

; upload_flags =
;     -s
;     tcl
;     -f
;     interface/ftdi/tumpa.cfg
;     -f
;     interface/ftdi/swd-resistor-hack.cfg
;     -c
;     transport select swd
;     -f
;     target/stm32f1x.cfg
; 		-c
; 		reset_config srst_only connect_assert_srst

; upload_command = openocd $UPLOAD_FLAGS

upload_flags =
    -s
    $PROJECT_PACKAGES_DIR/tool-openocd/scripts
    -f
    interface/ftdi/tumpa.cfg
    -f
    interface/ftdi/swd-resistor-hack.cfg
    -f
    target/stm32f1x.cfg

; upload_flags =
;     -s
;     tcl
;     -f
;     interface/ftdi/tumpa.cfg
;     -f
;     interface/ftdi/swd-resistor-hack.cfg
;     -f
;     target/stm32f1x.cfg

; upload_command =
; 		$PROJECT_PACKAGES_DIR/tool-openocd/bin/openocd $UPLOAD_FLAGS -c "program {$SOURCE} verify reset; shutdown;"


; upload_command =
; 		$PROJECT_PACKAGES_DIR/tool-openocd/bin/openocd $UPLOAD_FLAGS -c "reset_config srst_only connect_assert_srst" -c "program {$SOURCE} 0x08000000 verify reset; shutdown;"



upload_command =
		$PROJECT_PACKAGES_DIR/tool-openocd/bin/openocd $UPLOAD_FLAGS -c "init; reset halt; wait_halt 50000; halt" -c "program {$SOURCE} 0x08000000 verify; shutdown;"



; upload_command = openocd $UPLOAD_FLAGS -c "program {$SOURCE} 0x08000000 verify reset; shutdown;"

; test debug command, open a terminal
; pio debug --interface=gdb

; pio debugging options
; https://docs.platformio.org/en/latest/projectconf/section_env_debug.htm

debug_tool = custom

; debug_build_flags = -O0 -ggdb3 -g3
; debug_build_flags = -ggdb3 -g3
; debug_build_flags = -ggdb3
; debug_build_flags = -v

; debug_init_break = tbreak main
; debug_init_break = tbreak setup
; debug_init_break = tbreak loop
debug_init_break = info target ; skip the default breakpoint, does nothing

; debug_port = localhost:4444
debug_port = localhost:3333

; default is already ok
; debug_svd_path = /home/id/.platformio/platforms/ststm32/misc/svd/STM32F103xx.svd

; NOT RECOGNIZED
; debug_server_ready_pattern = Waiting for GDB connection
; debug_server_ready_pattern = ^.*Listening on port \d+ for gdb connections

; debug_load_cmds =
;   monitor flash erase_sector 0 0 11
;   load

debug_load_cmds =
  load


; /zpool-0/Media/.AppData/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../arm-none-eabi/bin/ld: .pio/build/generic_stm32f103c/firmware.elf section `.text' will not fit in region `rom'
; /zpool-0/Media/.AppData/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../arm-none-eabi/bin/ld: region `rom' overflowed by 7616 bytes
; collect2: error: ld returned 1 exit status
; *** [.pio/build/generic_stm32f103c/firmware.elf] Error 1
; ================================= [FAILED] Took 1.61 seconds =================================
; The terminal process "platformio 'debug'" terminated with exit code: 1.

; Terminal will be reused by tasks, press any key to close it.

; debug_init_cmds =
;   target extended-remote $DEBUG_PORT
;   $INIT_BREAK
;   monitor reset halt
;   $LOAD_CMDS
;   monitor init
;   monitor reset halt

; debug_init_cmds =
;   target extended-remote $DEBUG_PORT
;   $INIT_BREAK
;   monitor halt
;   monitor init
;   monitor resume

; debug_init_cmds =
;   target extended-remote $DEBUG_PORT
;   $INIT_BREAK
;   monitor halt
;   $LOAD_CMDS
;   monitor init
;   monitor resume

; ! works, break after startup
debug_init_cmds =
  target extended-remote $DEBUG_PORT
  $INIT_BREAK
  monitor halt
  load
  monitor init
  ; monitor resume

; ! works too, ignore debug_init_break = , and dont resume after startup
; debug_init_cmds =
;   target extended-remote $DEBUG_PORT
;   monitor halt
;   load
;   monitor init
;   ; monitor resume



; debug_init_cmds =
;   target extended-remote 3333
;   monitor halt
;   load
;   monitor init
;   monitor resume


; debug_extra_cmds =
;   break main.cpp:13
;   break foo.cpp:100
;   source .gdbinit

; debug_server =
; 		$PROJECT_PACKAGES_DIR/tool-openocd/bin/openocd
; 		$UPLOAD_FLAGS
; 		-c
; 		reset_config srst_only connect_assert_srst

;     -s
;     tcl
;     -f
;     interface/ftdi/tumpa.cfg
;     -f
;     interface/ftdi/swd-resistor-hack.cfg
;     -c
;     transport select swd
;     -f
;     target/stm32f1x.cfg
; 		-c
; 		reset_config srst_only connect_assert_srst

debug_server =
		openocd
    -s
    tcl
    -f
    interface/ftdi/tumpa.cfg
    -f
    interface/ftdi/swd-resistor-hack.cfg
    -c
    transport select swd
    -f
    target/stm32f1x.cfg
		-c
		reset_config srst_only connect_assert_srst

; debug_server =
; 		openocd
; 		$UPLOAD_FLAGS
; 		-c
; 		reset_config srst_only connect_assert_srst

; debug_server =
;   $PLATFORMIO_CORE_DIR/packages/tool-openocd/bin/openocd
;   -f
;   $PLATFORMIO_CORE_DIR/packages/tool-openocd/scripts/board/st_nucleo_f4.cfg

; debug_server =
;   /full/path/to/JLinkGDBServerCL
;   -singlerun
;   -if
;   SWD
;   -select
;   USB
;   -port
;   2331
;   -device
;   STM32F446RE

; debug_init_cmds =
;   define pio_reset_halt_target
;       monitor reset
;       monitor halt
;   end
;   define pio_reset_run_target
;       monitor clrbp
;       monitor reset
;       monitor go
;   end
;   target extended-remote $DEBUG_PORT
;   monitor clrbp
;   monitor speed auto
;   pio_reset_halt_target
;   $LOAD_CMDS
;   $INIT_BREAK



  ; _openocd_scripts_path="$HOME/.platformio/packages/tool-openocd/scripts"
  ; # _firmware_elf=".pio/build/blackpill_f411ce/firmware.elf"
  ; _firmware_elf="$1"

  ; openocd -d1 -s "$_openocd_scripts_path" \
  ;   -f interface/stlink.cfg -c "transport select hla_swd" -f target/stm32f4x.cfg \
  ;   -c "program {$_firmware_elf}  verify reset; shutdown;"

